apply plugin: 'com.android.library'

android {
    compileSdkVersion PRJ_COMPILE_SDK_VERSION

    defaultConfig {
        minSdkVersion PRJ_MIN_SDK_VERSION
        targetSdkVersion PRJ_TARGET_SDK_VERSION
        versionCode PRJ_VERSION_CODE
        versionName PRJ_VERSION_NAME
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        archivesBaseName = "ai-maskedit-$versionName"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JAVA_SRC_COMPATIBILITY
        targetCompatibility JAVA_TARGET_COMPATIBILITY
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

task cleanArtifact(type: Delete) {
    delete fileTree(dir: "$rootDir/artefacts" , include: '**/ai-*.aar')
}

task copyArtifact(type: Copy, dependsOn: cleanArtifact) {
    def sourceRoot = "$buildDir/outputs/aar/"
    def targetRoot = "$rootDir/artefacts/"

    from(sourceRoot)
    into(targetRoot)
    include('*.aar')

    doFirst{
        println "SOURCE: $sourceRoot"
        println "TARGET: $targetRoot"
    }

    eachFile {
        println "FILE: $it.relativeSourcePath -> $it.relativePath"
    }
}

build.finalizedBy(copyArtifact)
